@startuml SunTrackerSequenceDiagram

' Define participants
participant "Main Program" as mp
participant "Serial Interface" as si
participant "Picamera2" as cam
participant "SolarSensorDecoder" as scd
participant "CameraProcessor" as cp
participant "QuadCellDecoder" as qcd
participant "StepperController" as sc

' Define relations and datapath
' alt Data collected via Pi camera
'     pc -> mp : collect current video frame
'     mp -> cp : set_current_frame(input_frame)
'     cp -> cp: split_frame()
'     cp -> cp: compute_average_intensities()
'     mp -> qcp : get_computed_values()
'     mp -> qcd : set_intensity_values(input_intensities)
' else Data collected via quad-cell sensor
'     mp -> qc : collect current voltage readings
'     mp -> qcp : set_current_voltages(input_voltages)
'     mp -> qcp : get_computed_values()
'     mp -> qcd : set_intensity_values(input_intensities)
'end

mp -> cam : initialize camera and OpenCV2 video capture
mp -> cp : constructs w/ **CameraProcessor(size)**
mp -> sc : constructs w/ **StepperController()**
mp -> qcd : constructs & provides reference to StepperController singleton w/ **QuadCellDecoder(sCon)**
mp -> scd : constructs & provides reference to StepperController singleton w/ **SolarSensorDecoder(sCon)**
loop Sampled ADC data and input frame at rate of 3 Hz ...
mp -> si: read ADC values
si --> mp
mp -> cam : read input frame via OpenCV2 library
cam --> mp
mp -> scd: **decode_brightness_into_action(adc_vals)** (from //process_current_adc_data(...)//)
alt If proper photodiode is not brightest or darkest ...
    scd -> sc : **push_movement_command(PAN_LEFT)**
    scd -> mp : Returns Boolean: **trigger_quad_cell** = False
else
    scd -> mp : Returns Boolean: **trigger_quad_cell** = True
end
scd -> mp: 
alt **trigger_quad_cell** is //True//
    mp -> cp : **set_frame(frame)**
    mp -> cp : **convert_frame()** 
    mp -> cp : **split_frame()**
    mp -> cp : **get_quadrants()**
    cp --> mp
    mp -> cp : **compute_brightness()**
    cp --> mp
    mp -> qcd : **set_intensity_values(brightness_vals)** (from //process_current_frame(...)//)
    mp -> qcd : **compute_quadrant_variance()** (from //process_current_frame(...)//)
    mp -> qcd : **locate_brightest_quadrants()** (from //process_current_frame(...)//)
    mp -> qcd : **decode_brightness_into_direction()** (from //process_current_frame(...)//)
    qcd -> sc : **push_movement_command(PAN_LEFT)**
end
mp -> sc : move_steppers()
end

@enduml